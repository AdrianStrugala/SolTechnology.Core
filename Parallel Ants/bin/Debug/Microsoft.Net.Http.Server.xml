<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Net.Http.Server</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Net.Http.Server.AuthenticationManager">
            <summary>
            Exposes the Http.Sys authentication configurations.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.Helpers.GetChunkHeader(System.Int32)">
            <summary>
            A private utility routine to convert an integer to a chunk header,
            which is an ASCII hex number followed by a CRLF.The header is returned
            as a byte array.
            Generates a right-aligned hex string and returns the start offset.
            </summary>
            <param name="size">Chunk size to be encoded</param>
            <returns>A byte array with the header in int.</returns>
        </member>
        <member name="T:Microsoft.Net.Http.Server.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_ArrayTooSmall">
            <summary>
              Looks up a localized string similar to The destination array is too small..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_EndCalledMultipleTimes">
            <summary>
              Looks up a localized string similar to End has already been called..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_InvalidStatusCode">
            <summary>
              Looks up a localized string similar to The status code &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_NoSeek">
            <summary>
              Looks up a localized string similar to The stream is not seekable..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_PrefixAlreadyRegistered">
            <summary>
              Looks up a localized string similar to The prefix &apos;{0}&apos; is already registered..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_ReadOnlyStream">
            <summary>
              Looks up a localized string similar to This stream only supports read operations..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_TooMuchWritten">
            <summary>
              Looks up a localized string similar to More data written than specified in the Content-Length header..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_UnsupportedScheme">
            <summary>
              Looks up a localized string similar to Only the http and https schemes are supported..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_WriteOnlyStream">
            <summary>
              Looks up a localized string similar to This stream only supports write operations..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Exception_WrongIAsyncResult">
            <summary>
              Looks up a localized string similar to The given IAsyncResult does not match this opperation..
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Resources.Warning_ExceptionInOnResponseCompletedAction">
            <summary>
            An exception occured while running an action registered with {0}.
            </summary>
        </member>
        <member name="T:Microsoft.Net.Http.Server.TimeoutManager">
            <summary>
            Exposes the Http.Sys timeout configurations.  These may also be configured in the registry.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.TimeoutManager.EntityBody">
             <summary>
             The time, in seconds, allowed for the request entity body to arrive.  The default timer is 2 minutes.
             
             The HTTP Server API turns on this timer when the request has an entity body. The timer expiration is 
             initially set to the configured value. When the HTTP Server API receives additional data indications on the 
             request, it resets the timer to give the connection another interval.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.TimeoutManager.DrainEntityBody">
             <summary>
             The time, in seconds, allowed for the HTTP Server API to drain the entity body on a Keep-Alive connection. 
             The default timer is 2 minutes.
             
             On a Keep-Alive connection, after the application has sent a response for a request and before the request 
             entity body has completely arrived, the HTTP Server API starts draining the remainder of the entity body to 
             reach another potentially pipelined request from the client. If the time to drain the remaining entity body 
             exceeds the allowed period the connection is timed out.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.TimeoutManager.RequestQueue">
             <summary>
             The time, in seconds, allowed for the request to remain in the request queue before the application picks 
             it up.  The default timer is 2 minutes.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.TimeoutManager.IdleConnection">
             <summary>
             The time, in seconds, allowed for an idle connection.  The default timer is 2 minutes.
             
             This timeout is only enforced after the first request on the connection is routed to the application.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.TimeoutManager.HeaderWait">
             <summary>
             The time, in seconds, allowed for the HTTP Server API to parse the request header.  The default timer is 
             2 minutes.
              
             This timeout is only enforced after the first request on the connection is routed to the application.
            
             Use TimeSpan.Zero to indicate that system defaults should be used.
             </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.TimeoutManager.MinSendBytesPerSecond">
             <summary>
             The minimum send rate, in bytes-per-second, for the response. The default response send rate is 150 
             bytes-per-second.
             
             Use 0 to indicate that system defaults should be used.
            
             To disable this timer set it to UInt32.MaxValue
             </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.UrlPrefix.Create(System.String,System.String,System.String,System.String)">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa364698(v=vs.85).aspx
            </summary>
            <param name="scheme">http or https. Will be normalized to lower case.</param>
            <param name="host">+, *, IPv4, [IPv6], or a dns name. Http.Sys does not permit punycode (xn--), use Unicode instead.</param>
            <param name="port">If empty, the default port for the given scheme will be used (80 or 443).</param>
            <param name="path">Should start and end with a '/', though a missing trailing slash will be added. This value must be un-escaped.</param>
        </member>
        <member name="M:Microsoft.Net.Http.Server.UrlPrefix.Create(System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa364698(v=vs.85).aspx
            </summary>
            <param name="scheme">http or https. Will be normalized to lower case.</param>
            <param name="host">+, *, IPv4, [IPv6], or a dns name. Http.Sys does not permit punycode (xn--), use Unicode instead.</param>
            <param name="portValue">If empty, the default port for the given scheme will be used (80 or 443).</param>
            <param name="path">Should start and end with a '/', though a missing trailing slash will be added. This value must be un-escaped.</param>
        </member>
        <member name="T:Microsoft.Net.Http.Server.UrlPrefixCollection">
            <summary>
            A collection or URL prefixes
            </summary>
        </member>
        <member name="T:Microsoft.Net.Http.Server.WebListener">
            <summary>
            An HTTP server wrapping the Http.Sys APIs that accepts requests.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.WebListener.Start">
            <summary>
            Start accepting incoming requests.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.WebListener.Dispose">
            <summary>
            Stop the server and clean up.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.WebListener.AcceptAsync">
            <summary>
            Accept a request from the incoming request queue.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.WebListenerSettings.Logger">
            <summary>
            The logger that will be used to create the WebListener instance. This should not be changed
            after creating the listener.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.WebListenerSettings.UrlPrefixes">
            <summary>
            The url prefixes to register with Http.Sys. These may be modified at any time prior to disposing
            the listener.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.WebListenerSettings.Authentication">
            <summary>
            Http.Sys authentication settings. These may be modified at any time prior to disposing
            the listener.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.WebListenerSettings.Timeouts">
            <summary>
            Exposes the Http.Sys timeout configurations.  These may also be configured in the registry.
            These may be modified at any time prior to disposing the listener.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.WebListenerSettings.ThrowWriteExceptions">
            <summary>
            Gets or Sets if response body writes that fail due to client disconnects should throw exceptions or
            complete normally. The default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.WebListenerSettings.RequestQueueLimit">
            <summary>
            Gets or sets the maximum number of requests that will be queued up in Http.Sys.
            </summary>
        </member>
        <member name="T:Microsoft.Net.Http.Server.AddressFamily">
            <devdoc>
               <para>
                  Specifies the address families that an instance of the <see cref="T:System.Net.Sockets.Socket"/>
                  class can use.
               </para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Unknown">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Unspecified">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Unix">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.InterNetwork">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.ImpLink">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Pup">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Chaos">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.NS">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Ipx">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Iso">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Osi">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Ecma">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.DataKit">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Ccitt">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Sna">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.DecNet">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.DataLink">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Lat">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.HyperChannel">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.AppleTalk">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.NetBios">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.VoiceView">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.FireFox">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Banyan">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Atm">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.InterNetworkV6">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Cluster">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Ieee12844">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Irda">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.NetworkDesigners">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.AddressFamily.Max">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="T:Microsoft.Net.Http.Server.SocketAddress">
            <devdoc>
               <para>
                  This class is used when subclassing EndPoint, and provides indication
                  on how to format the memory buffers that winsock uses for network addresses.
               </para>
            </devdoc>
        </member>
        <member name="M:Microsoft.Net.Http.Server.SocketAddress.#ctor(Microsoft.Net.Http.Server.AddressFamily,System.Int32)">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:Microsoft.Net.Http.Server.SocketAddress.Item(System.Int32)">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="T:Microsoft.Net.Http.Server.TokenBindingUtil">
            <summary>
            Contains helpers for dealing with TLS token binding.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.TokenBindingUtil.GetProvidedTokenIdFromBindingInfo(Microsoft.Net.Http.Server.HttpApi.HTTP_REQUEST_TOKEN_BINDING_INFO*,System.Byte[]@)">
            <summary>
            Returns the 'provided' token binding identifier, optionally also returning the
            'referred' token binding identifier. Returns null on failure.
            </summary>
        </member>
        <member name="T:Microsoft.Net.Http.Server.HttpStatusCode">
            <devdoc>
               <para>Contains the values of status
                  codes defined for the HTTP protocol.</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Continue">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.SwitchingProtocols">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.OK">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Created">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Accepted">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.NonAuthoritativeInformation">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.NoContent">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.ResetContent">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.PartialContent">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.MultipleChoices">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Ambiguous">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.MovedPermanently">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Moved">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Found">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Redirect">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.SeeOther">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.RedirectMethod">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.NotModified">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.UseProxy">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Unused">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.TemporaryRedirect">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.RedirectKeepVerb">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.BadRequest">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Unauthorized">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.PaymentRequired">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Forbidden">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.NotFound">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.MethodNotAllowed">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.NotAcceptable">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.ProxyAuthenticationRequired">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.RequestTimeout">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Conflict">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.Gone">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.LengthRequired">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.PreconditionFailed">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.RequestEntityTooLarge">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.RequestUriTooLong">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.UnsupportedMediaType">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.RequestedRangeNotSatisfiable">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.ExpectationFailed">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.InternalServerError">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.NotImplemented">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.BadGateway">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.ServiceUnavailable">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.GatewayTimeout">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:Microsoft.Net.Http.Server.HttpStatusCode.HttpVersionNotSupported">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:Microsoft.Net.Http.Server.RawUrlHelper.GetPath(System.Byte[])">
            <summary>
            Find the segment of the URI byte array which represents the path.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.RawUrlHelper.FindHttpOrHttps(System.Byte[])">
            <summary>
            Compare the beginning portion of the raw URL byte array to https:// and http://
            </summary>
            <param name="raw">The byte array represents the raw URI</param>
            <returns>Length of the matched bytes, 0 if it is not matched.</returns>
        </member>
        <member name="M:Microsoft.Net.Http.Server.RequestContext.Dispose">
            <summary>
            Flushes and completes the response.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.RequestContext.Abort">
            <summary>
            Forcibly terminate and dispose the request, closing the connection if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Server.RequestUriBuilder.Unescape(System.ArraySegment{System.Byte})">
            <summary>
            Unescape a given path string in place. The given path string  may contain escaped char.
            </summary>
            <param name="rawPath">The raw path string to be unescaped</param>
            <returns>The unescaped path string</returns>
        </member>
        <member name="M:Microsoft.Net.Http.Server.RequestUriBuilder.DecodeCore(System.Int32@,System.Int32@,System.Int32,System.Byte[])">
            <summary>
            Unescape the percent-encodings
            </summary>
            <param name="reader">The iterator point to the first % char</param>
            <param name="writer">The place to write to</param>
            <param name="end">The end of the buffer</param>
            <param name="buffer">The byte array</param>
        </member>
        <member name="M:Microsoft.Net.Http.Server.RequestUriBuilder.UnescapePercentEncoding(System.Int32@,System.Int32,System.Byte[])">
            <summary>
            Read the percent-encoding and try unescape it.
            
            The operation first peek at the character the <paramref name="scan"/> 
            iterator points at. If it is % the <paramref name="scan"/> is then 
            moved on to scan the following to characters. If the two following 
            characters are hexadecimal literals they will be unescaped and the 
            value will be returned.
            
            If the first character is not % the <paramref name="scan"/> iterator 
            will be removed beyond the location of % and -1 will be returned.
            
            If the following two characters can't be successfully unescaped the 
            <paramref name="scan"/> iterator will be move behind the % and -1 
            will be returned.
            </summary>
            <param name="scan">The value to read</param>
            <param name="end">The end of the buffer</param>
            <param name="buffer">The byte array</param>
            <returns>The unescaped byte if success. Otherwise return -1.</returns>
        </member>
        <member name="M:Microsoft.Net.Http.Server.RequestUriBuilder.ReadHex(System.Int32@,System.Int32,System.Byte[])">
            <summary>
            Read the next char and convert it into hexadecimal value.
            
            The <paramref name="scan"/> iterator will be moved to the next
            byte no matter no matter whether the operation successes.
            </summary>
            <param name="scan">The value to read</param>
            <param name="end">The end of the buffer</param>
            <param name="buffer">The byte array</param>
            <returns>The hexadecimal value if successes, otherwise -1.</returns>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Response.AuthenticationChallenges">
            <summary>
            The authentication challenges that will be added to the response if the status code is 401.
            This must be a subset of the AuthenticationSchemes enabled on the server.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Response.CacheTtl">
            <summary>
            Enable kernel caching for the response with the given timeout. Http.Sys determines if the response
            can be cached.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Server.Response.HasStarted">
            <summary>
            Indicates if the response status, reason, and headers are prepared to send and can
            no longer be modified. This is caused by the first write or flush to the response body.
            </summary>
        </member>
        <member name="T:System.Net.WebSockets.ManagedWebSocket">
            <summary>A managed implementation of a web socket that sends and receives data via a <see cref="T:System.IO.Stream"/>.</summary>
            <remarks>
            Thread-safety:
            - It's acceptable to call ReceiveAsync and SendAsync in parallel.  One of each may run concurrently.
            - It's acceptable to have a pending ReceiveAsync while CloseOutputAsync or CloseAsync is called.
            - Attemping to invoke any other operations in parallel may corrupt the instance.  Attempting to invoke
              a send operation while another is in progress or a receive operation while another is in progress will
              result in an exception.
            </remarks>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.CreateFromConnectedStream(System.IO.Stream,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>Creates a <see cref="T:System.Net.WebSockets.ManagedWebSocket"/> from a <see cref="T:System.IO.Stream"/> connected to a websocket endpoint.</summary>
            <param name="stream">The connected Stream.</param>
            <param name="isServer">true if this is the server-side of the connection; false if this is the client-side of the connection.</param>
            <param name="subprotocol">The agreed upon subprotocol for the connection.</param>
            <param name="keepAliveIntervalSeconds">The interval to use for keep-alive pings.</param>
            <param name="receiveBufferSize">The buffer size to use for received data.</param>
            <returns>The created <see cref="T:System.Net.WebSockets.ManagedWebSocket"/> instance.</returns>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.t_headerMask">
            <summary>Per-thread cached 4-byte mask byte array.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.s_random">
            <summary>Thread-safe random number generator used to generate masks for each send.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.s_textEncoding">
            <summary>Encoding for the payload of text messages: UTF8 encoding that throws if invalid bytes are discovered, per the RFC.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.s_validSendStates">
            <summary>Valid states to be in when calling SendAsync.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.s_validReceiveStates">
            <summary>Valid states to be in when calling ReceiveAsync.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.s_validCloseOutputStates">
            <summary>Valid states to be in when calling CloseOutputAsync.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.s_validCloseStates">
            <summary>Valid states to be in when calling CloseAsync.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.MaxMessageHeaderLength">
            <summary>The maximum size in bytes of a message frame header that includes mask bytes.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.MaxControlPayloadLength">
            <summary>The maximum size of a control message payload.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket.MaskLength">
            <summary>Length of the mask XOR'd with the payload data.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._stream">
            <summary>The stream used to communicate with the remote server.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._isServer">
            <summary>
            true if this is the server-side of the connection; false if it's client.
            This impacts masking behavior: clients always mask payloads they send and
            expect to always receive unmasked payloads, whereas servers always send
            unmasked payloads and expect to always receive masked payloads.
            </summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._subprotocol">
            <summary>The agreed upon subprotocol with the server.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._keepAliveTimer">
            <summary>Timer used to send periodic pings to the server, at the interval specified</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._abortSource">
            <summary>CancellationTokenSource used to abort all current and future operations when anything is canceled or any error occurs.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._receiveBuffer">
            <summary>Buffer used for reading data from the network.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._utf8TextState">
            <summary>
            Tracks the state of the validity of the UTF8 encoding of text payloads.  Text may be split across fragments.
            </summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._sendFrameAsyncLock">
            <summary>
            Semaphore used to ensure that calls to SendFrameAsync don't run concurrently.  While <see cref="F:System.Net.WebSockets.ManagedWebSocket._lastSendAsync"/>
            is used to fail if a caller tries to issue another SendAsync while a previous one is running, internally
            we use SendFrameAsync as an implementation detail, and it should not cause user requests to SendAsync to fail,
            nor should such internal usage be allowed to run concurrently with other internal usage or with SendAsync.
            </summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._state">
            <summary>The current state of the web socket in the protocol.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._disposed">
            <summary>true if Dispose has been called; otherwise, false.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._sentCloseFrame">
            <summary>Whether we've ever sent a close frame.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._receivedCloseFrame">
            <summary>Whether we've ever received a close frame.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._closeStatus">
            <summary>The reason for the close, as sent by the server, or null if not yet closed.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._closeStatusDescription">
            <summary>A description of the close reason as sent by the server, or null if not yet closed.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._lastReceiveHeader">
            <summary>
            The last header received in a ReceiveAsync.  If ReceiveAsync got a header but then
            returned fewer bytes than was indicated in the header, subsequent ReceiveAsync calls
            will use the data from the header to construct the subsequent receive results, and
            the payload length in this header will be decremented to indicate the number of bytes
            remaining to be received for that header.  As a result, between fragments, the payload
            length in this header should be 0.
            </summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._receiveBufferOffset">
            <summary>The offset of the next available byte in the _receiveBuffer.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._receiveBufferCount">
            <summary>The number of bytes available in the _receiveBuffer.</summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._receivedMaskOffsetOffset">
            <summary>
            When dealing with partially read fragments of binary/text messages, a mask previously received may still
            apply, and the first new byte received may not correspond to the 0th position in the mask.  This value is
            the next offset into the mask that should be applied.
            </summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._sendBuffer">
            <summary>
            Buffer used to store the complete message to be sent to the stream.  This is needed
            rather than just sending a header and then the user's buffer, as we need to mutate the
            buffered data with the mask, and we don't want to change the data in the user's buffer.
            </summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._lastSendWasFragment">
            <summary>
            Whether the last SendAsync had endOfMessage==false. We need to track this so that we
            can send the subsequent message with a continuation opcode if the last message was a fragment.
            </summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._lastSendAsync">
            <summary>
            The task returned from the last SendAsync operation to not complete synchronously.
            If this is not null and not completed when a subsequent SendAsync is issued, an exception occurs.
            </summary>
        </member>
        <member name="F:System.Net.WebSockets.ManagedWebSocket._lastReceiveAsync">
            <summary>
            The task returned from the last ReceiveAsync operation to not complete synchronously.
            If this is not null and not completed when a subsequent ReceiveAsync is issued, an exception occurs.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ManagedWebSocket.StateUpdateLock">
            <summary>Lock used to protect update and check-and-update operations on _state.</summary>
        </member>
        <member name="P:System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncLock">
            <summary>
            We need to coordinate between receives and close operations happening concurrently, as a ReceiveAsync may
            be pending while a Close{Output}Async is issued, which itself needs to loop until a close frame is received.
            As such, we need thread-safety in the management of <see cref="F:System.Net.WebSockets.ManagedWebSocket._lastReceiveAsync"/>. 
            </summary>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.#ctor(System.IO.Stream,System.Boolean,System.String,System.TimeSpan,System.Int32)">
            <summary>Initializes the websocket.</summary>
            <param name="stream">The connected Stream.</param>
            <param name="isServer">true if this is the server-side of the connection; false if this is the client-side of the connection.</param>
            <param name="subprotocol">The agreed upon subprotocol for the connection.</param>
            <param name="keepAliveInterval">The interval to use for keep-alive pings.</param>
            <param name="receiveBufferSize">The buffer size to use for received data.</param>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.SendFrameAsync(System.Net.WebSockets.ManagedWebSocket.MessageOpcode,System.Boolean,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>Sends a websocket frame to the network.</summary>
            <param name="opcode">The opcode for the message.</param>
            <param name="endOfMessage">The value of the FIN bit for the message.</param>
            <param name="payloadBuffer">The buffer containing the payload data fro the message.</param>
            <param name="cancellationToken">The CancellationToken to use to cancel the websocket.</param>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.SendFrameLockAcquiredNonCancelableAsync(System.Net.WebSockets.ManagedWebSocket.MessageOpcode,System.Boolean,System.ArraySegment{System.Byte})">
            <summary>Sends a websocket frame to the network. The caller must hold the sending lock.</summary>
            <param name="opcode">The opcode for the message.</param>
            <param name="endOfMessage">The value of the FIN bit for the message.</param>
            <param name="payloadBuffer">The buffer containing the payload data fro the message.</param>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.WriteFrameToSendBuffer(System.Net.WebSockets.ManagedWebSocket.MessageOpcode,System.Boolean,System.ArraySegment{System.Byte})">
            <summary>Writes a frame into the send buffer, which can then be sent over the network.</summary>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.WriteRandomMask(System.Byte[],System.Int32)">
            <summary>Writes a 4-byte random mask to the specified buffer at the specified offset.</summary>
            <param name="buffer">The buffer to which to write the mask.</param>
            <param name="offset">The offset into the buffer at which to write the mask.</param>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Receive the next text, binary, continuation, or close message, returning information about it and
            writing its payload into the supplied buffer.  Other control messages may be consumed and processed
            as part of this operation, but data about them will not be returned.
            </summary>
            <param name="payloadBuffer">The buffer into which payload data should be written.</param>
            <param name="cancellationToken">The CancellationToken used to cancel the websocket.</param>
            <returns>Information about the received message.</returns>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.HandleReceivedCloseAsync(System.Net.WebSockets.ManagedWebSocket.MessageHeader,System.Threading.CancellationToken)">
            <summary>Processes a received close message.</summary>
            <param name="header">The message header.</param>
            <param name="cancellationToken">The cancellation token to use to cancel the websocket.</param>
            <returns>The received result message.</returns>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.HandleReceivedPingPongAsync(System.Net.WebSockets.ManagedWebSocket.MessageHeader,System.Threading.CancellationToken)">
            <summary>Processes a received ping or pong message.</summary>
            <param name="header">The message header.</param>
            <param name="cancellationToken">The cancellation token to use to cancel the websocket.</param>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.IsValidCloseStatus(System.Net.WebSockets.WebSocketCloseStatus)">
            <summary>Check whether a close status is valid according to the RFC.</summary>
            <param name="closeStatus">The status to validate.</param>
            <returns>true if the status if valid; otherwise, false.</returns>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.CloseWithReceiveErrorAndThrowAsync(System.Net.WebSockets.WebSocketCloseStatus,System.Net.WebSockets.WebSocketError,System.Threading.CancellationToken,System.Exception)">
            <summary>Send a close message to the server and throw an exception, in response to getting bad data from the server.</summary>
            <param name="closeStatus">The close status code to use.</param>
            <param name="error">The error reason.</param>
            <param name="cancellationToken">The CancellationToken used to cancel the websocket.</param>
            <param name="innerException">An optional inner exception to include in the thrown exception.</param>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.TryParseMessageHeaderFromReceiveBuffer(System.Net.WebSockets.ManagedWebSocket.MessageHeader@)">
            <summary>Parses a message header from the buffer.  This assumes the header is in the buffer.</summary>
            <param name="resultHeader">The read header.</param>
            <returns>true if a header was read; false if the header was invalid.</returns>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.CloseAsyncPrivate(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>Send a close message, then receive until we get a close response message.</summary>
            <param name="closeStatus">The close status to send.</param>
            <param name="statusDescription">The close status description to send.</param>
            <param name="cancellationToken">The CancellationToken to use to cancel the websocket.</param>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.SendCloseFrameAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>Sends a close message to the server.</summary>
            <param name="closeStatus">The close status to send.</param>
            <param name="closeStatusDescription">The close status description to send.</param>
            <param name="cancellationToken">The CancellationToken to use to cancel the websocket.</param>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.EnsureBufferLength(System.Byte[]@,System.Int32)">
            <summary>
            Grows the specified buffer if it's not at least the specified minimum length.
            Data is not copied if the buffer is grown.
            </summary>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.ApplyMask(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>Applies a mask to a portion of a byte array.</summary>
            <param name="toMask">The buffer to which the mask should be applied.</param>
            <param name="toMaskOffset">The offset into <paramref name="toMask"/> at which the mask should start to be applied.</param>
            <param name="mask">The array containing the mask to apply.</param>
            <param name="maskOffset">The offset into <paramref name="mask"/> of the mask to apply of length <see cref="F:System.Net.WebSockets.ManagedWebSocket.MaskLength"/>.</param>
            <param name="maskOffsetIndex">The next position offset from <paramref name="maskOffset"/> of which by to apply next from the mask.</param>
            <param name="count">The number of bytes starting from <paramref name="toMaskOffset"/> to which the mask should be applied.</param>
            <returns>The updated maskOffsetOffset value.</returns>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.ApplyMask(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>Applies a mask to a portion of a byte array.</summary>
            <param name="toMask">The buffer to which the mask should be applied.</param>
            <param name="toMaskOffset">The offset into <paramref name="toMask"/> at which the mask should start to be applied.</param>
            <param name="mask">The four-byte mask, stored as an Int32.</param>
            <param name="maskIndex">The index into the mask.</param>
            <param name="count">The number of bytes to mask.</param>
            <returns>The next index into the mask to be used for future applications of the mask.</returns>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.ThrowIfOperationInProgress(System.Threading.Tasks.Task,System.String)">
            <summary>Aborts the websocket and throws an exception if an existing operation is in progress.</summary>
        </member>
        <member name="M:System.Net.WebSockets.ManagedWebSocket.CreateOperationCanceledException(System.Exception,System.Threading.CancellationToken)">
            <summary>Creates an OperationCanceledException instance, using a default message and the specified inner exception and token.</summary>
        </member>
    </members>
</doc>
