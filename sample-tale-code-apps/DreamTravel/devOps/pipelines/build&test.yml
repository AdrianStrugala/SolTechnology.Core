pool:
  vmImage: ubuntu-latest

trigger:
  branches:
    include:
      - master

variables:
 - name: BuildConfiguration
   value: 'Release'
 - name: workingDirectory
   value: 'sample-tale-code-apps/DreamTravel/backend'

stages:
  - stage: Test
    displayName: Test
    variables:
       - group: dream-travel-test
    jobs:

    - job: RunTests
      steps:
      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet'
        inputs:
          versionSpec: '5.x'

      - task: UseDotNet@2
        displayName: 'Install .NET 6.0'
        inputs:
          packageType: sdk
          version: 6.0.x
          installationPath: $(Agent.ToolsDirectory)/dotnet
          
      - task: UseDotNet@2
        displayName: 'Install .NET 8.0'
        inputs:
          packageType: sdk
          version: 8.0.x
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: PowerShell@2
        displayName: Run SQL Server
        inputs:
          targetType: 'inline'
          script: |
            docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=password_xxddd_2137' -p 1404:1433 --name DB -d mcr.microsoft.com/mssql/server:2019-latest

      - task: PowerShell@2
        displayName: Deploy DB locally
        inputs:
          targetType: 'inline'
          workingDirectory: '$(workingDirectory)/src/Infrastructure/DreamTravelDatabase'
          script: |
            dotnet publish /p:TargetServerName=localhost /p:TargetPort=1404 /p:TargetUser=sa /p:TargetPassword=password_xxddd_2137 /p:TargetDatabaseName=DreamTravelDatabase

      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests'
        inputs:
          command: 'test'
          projects: '$(workingDirectory)/tests/**/*UnitTests.csproj'
          arguments: '--configuration $(BuildConfiguration)'
          publishTestResults: true

      - task: DotNetCoreCLI@2
        displayName: 'Run integration tests'
        inputs:
          command: 'test'
          projects: '$(workingDirectory)/tests/**/*IntegrationTests.csproj'
          arguments: '--configuration $(BuildConfiguration)'
          publishTestResults: true

      - task: DotNetCoreCLI@2
        displayName: 'Run functional tests'
        inputs:
          command: 'test'
          projects: '$(workingDirectory)/tests/**/*FunctionalTests.csproj'
          arguments: '--configuration $(BuildConfiguration)'
          publishTestResults: true

    # - job: RunE2EPipeline
    #   displayName: 'Run E2E tests'
    #   timeoutInMinutes: 10
    #   steps:
    #     - template: ../pipelines/triggerExternalPipeline.yml
    #       parameters:
    #           organizationId: "xionc"
    #           projectName: "Dream Travel"
    #           definitionId: 12
    #           apiVersion: "7.1-preview.1"
    #           pipelineName: "Dream Travel v3 - E2E Tests"
    #           branch: "master"
    #           parentRunId: $(Build.BuildId)
    #           waitingTimeBeforePolling: 60
    #           timeoutBetweenPollingCalls: 10
    #           timeoutForPipelineRunning: 600
    #           token: "$(System.AccessToken)"
    #           maxTriggerRetries: 2
    #           templateParameters: '{}'
    #           variables: '{"parentBuild": { value: "$(Build.BuildId)"}}'

  - stage: BuildAndPublish
    displayName: Build&Publish
    jobs:

    - job: PublishArtifacts
      displayName: 'Publish Artifacts'
      
      steps:
        - task: UseDotNet@2
          displayName: 'Install .NET 8.0'
          inputs:
            packageType: sdk
            version: 8.0.x
            installationPath: $(Agent.ToolsDirectory)/dotnet
          
        - task: CopyFiles@2
          displayName: 'Publish Infrastructure'
          inputs:
            sourceFolder: '$(workingDirectory)/../devOps/infrastructure'
            contents: '*'
            targetFolder: $(Build.ArtifactStagingDirectory)/Infrastructure

        - task: DotNetCoreCLI@2
          displayName: 'Publish Database'
          inputs:
            projects: '$(workingDirectory)/**/DreamTravelDatabase.csproj'
            arguments: '-o $(Build.ArtifactStagingDirectory)/Database'
          
        - task: DotNetCoreCLI@2
          displayName: 'Publish Api'
          inputs:
            command: publish
            projects: '$(workingDirectory)/**/DreamTravel.Api.csproj'
            publishWebProjects: False
            arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/Api'

        - task: DotNetCoreCLI@2
          displayName: 'Publish Worker'
          inputs:
            command: publish
            projects: '$(workingDirectory)/**/DreamTravel.Worker.csproj'
            publishWebProjects: False
            arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/Worker'

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)' 
            artifactName: 'drop' 
          condition: always()