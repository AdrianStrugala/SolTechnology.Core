@{
    ViewData["Title"] = "Traveling Eco-Salesman";
}

<head>
    <style>
        /* Optional: Makes the sample page fill the window. */
        html, body {
            float: left;
            height: 100vh;
            margin: 0;
            padding: 0;
        }
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            float: left;
            height: 98vh;
            width: 98vw;
            margin: 0;
            padding: 0;
        }


        #btnModal {
            position: absolute;
            z-index: 99 !important;
            margin-left: 10%;
            margin-top: 0.7%;
        }

        .modal-dialog {
            position: relative;
            display: table; /* This is important */
            overflow-y: auto;
            overflow-x: auto;
            width: auto;
            min-width: 300px;
        }

        #listOfCities {
            resize: both;
            width: 100%;
            resize: none;
            overflow: hidden;
        }
    </style>
</head>

<!-- Modal -->
<div id="listOfCitiesModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">

                <h4 class="modal-title">Insert list of cities:</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <textarea onkeyup="auto_grow(this)" id="listOfCities">City one
City two</textarea>
            </div>
        </div>

    </div>
</div>

<div id="btnModal">
    <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#listOfCitiesModal">Cities</button>
</div>

<div id="map"></div>


@section Scripts
    {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC8ZkBAtPiwp0rk4SRdhH6vufM39eDMmHY&callback=initMap"
            async defer></script>

    <script>
        function calculateAndDisplayRoute(directionsService, map, origin, destination, toll) {
            var directionsDisplay = new google.maps.DirectionsRenderer;
            directionsDisplay.setMap(map);
            directionsService.route({
                    origin: origin,
                    destination: destination,
                    travelMode: 'DRIVING',
                    avoidTolls: toll
                },
                function (response, status) {
                    if (status === 'OK') {
                        directionsDisplay.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
        }


        function auto_grow(element) {
            element.style.height = "5px";
            element.style.height = (element.scrollHeight) + "px";
        }

        function initMap() {
            var directionsService = new google.maps.DirectionsService;
            var map = new google.maps.Map(document.getElementById('map'),
                {
                    zoom: 4,
                    center: { lat: 0, lng: 0 }
                });


            var onChangeHandler = function () {
                var listOfCities = document.getElementById("listOfCities").value;

                var markersList = listOfCities.split(';');

                for (var i = 0; i < markersList.length; i++) {
                    var marker = new google.maps.Marker({
                        position: markersList[i],
                        map: map,
                        title: markersList[i]
                    });
                }
                

                $.ajax({
                    type: 'POST',
                    dataType: 'html',
                     url: '@Url.Action("CalculateBestPath", "Home")',
                     data: { cities: listOfCities },
                    success: function(msg) {
                        alert(msg);                      

                        var pathList = JSON.parse(msg);
                        alert(pathList.length); 

                        for (var i = 0; i < pathList.length; i++) {

                            var isToll = true; 

                            if (pathList[i].Cost === 0) {
                                isToll = false;
                            }
                            calculateAndDisplayRoute(directionsService, map, pathList[i].StartingCity.Name, pathList[i].EndingCity.Name, isToll);
                        };
                    },
                    statusCode: {
                        404: function (content) { alert('cannot find resource'); },
                        500: function (content) { alert('internal server error'); }
                    },
                    error: function (req, status, errorObj) {
                        // handle status === "timeout"
                        // handle other errors
                    }
                });
            }

            document.getElementById('listOfCitiesModal').addEventListener('change', onChangeHandler);

        }
    </script>
}
