variables:
  BuildConfiguration: 'Release'
     
  azureServiceConnection: 'azureSWO'
  resourceGroupName: 'TaleCode'
  location: 'westeurope'
  templateFile: 'main.bicep'

stages:
  - stage: TestApplication
    displayName: Test Application
    jobs:

    - job: RunTests
      steps:
      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet'
        inputs:
          versionSpec: '5.x'

      - task: UseDotNet@2
        displayName: 'Set .NET Core to 6.0'
        inputs:
          packageType: sdk
          version: 6.0.x
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: PowerShell@2
        displayName: Run SQL Server
        inputs:
          targetType: 'inline'
          script: |
            docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=password_xxddd_2137' -p 1401:1433 --name DB -d mcr.microsoft.com/mssql/server:2019-latest

      - task: PowerShell@2
        displayName: Deploy DB locally
        inputs:
          targetType: 'inline'
          workingDirectory: 'taleCode/TaleCodeDatabase'
          script: |
            dotnet publish /p:TargetServerName=localhost /p:TargetPort=1401 /p:TargetUser=sa /p:TargetPassword=password_xxddd_2137 /p:TargetDatabaseName=TaleCodeDatabase

      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests'
        inputs:
          command: 'test'
          projects: '**/*Tests.csproj'
          custom: 'msbuild'
          arguments: '-p:Configuration=$(BuildConfiguration)'
          publishTestResults: true


  - stage: PublishArtifacts
    displayName: Publish Artifacts
    jobs:

    - job: PublishArtifacts
      displayName: 'Publish Artifacts'
      steps:
        - task: CopyFiles@2
          displayName: 'Publish Infrastructure'
          inputs:
            sourceFolder: 'devOps/infrastructure'
            contents: '*'
            targetFolder: $(Build.ArtifactStagingDirectory)/Infrastructure

        - task: DotNetCoreCLI@2
          displayName: 'Publish Database'
          inputs:
            projects: '**/TaleCodeDatabase.csproj'
            arguments: '-o $(Build.ArtifactStagingDirectory)/Database'
          
        - task: DotNetCoreCLI@2
          displayName: 'Publish Api'
          inputs:
            command: publish
            projects: '**/Api.csproj'
            arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/Api'

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)' 
            artifactName: 'drop' 


  - stage: DeployProd
    displayName: Deploy to Production

    jobs: 

    - job: DeployProd
      pool:
        vmImage: 'windows-latest'
      steps:
        - task: DownloadPipelineArtifact@2

        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az --version
              az group create --name $(resourceGroupName) --location $(location)
              az deployment group create --resource-group $(resourceGroupName) --template-file '$(Pipeline.Workspace)\drop\Infrastructure\$(templateFile)'

        - task: SqlAzureDacpacDeployment@1
          displayName: 'Deploy Database'
          inputs:
            azureSubscription: $(azureServiceConnection)
            ServerName: talecodesqlserver.database.windows.net
            DatabaseName: talecode
            SqlUsername: adrian
            SqlPassword: 'password_xxddd_2137'
            DacpacFile: '$(Pipeline.Workspace)\drop\Database\TaleCodeDatabase.dacpac'

        - task: AzureWebApp@1
          displayName: 'Deploy Api'
          inputs:
            appType: webAppLinux
            azureSubscription: $(azureServiceConnection)
            appName: 'talecodeapi'
            package: '$(Pipeline.Workspace)\drop\Api\SolTechnology.TaleCode.Api.zip'




